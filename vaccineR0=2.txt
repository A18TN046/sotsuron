import matplotlib as mpl
import numpy as np
from scipy.integrate import solve_ivp
import matplotlib.pyplot as plt
%matplotlib inline

#大阪の2021年7月1日から2021年10月31日までの感染者数の1週間平均
data = [94.43, 94.86, 103.43, 102.29, 107.58, 112.58, 118.72, 121.15, 124, 131.43, 142.58, 146.43, 159.15, 187.43, 215.86, 231.72, 257.43, 271.15, 288.29, 300.86, 321.15, 340.72, 358.58, 344.72, 374.58, 396, 457.15, 501, 568.29, 640.15, 748.29, 808.15, 818.72, 866.86, 927.72, 949.58, 1010.72, 1022.58, 1061.72, 1139.86, 1085.43, 1123.29, 1204.58, 1240.43, 1341.15, 1426.86, 1422.43, 1588, 1703.29, 1816, 1962.29, 2066.29, 2131.58, 2216.29, 2131.58, 2216.19, 2289.43, 2362.43, 2417.58, 2450.29, 2462.43, 2486.43, 2493.15, 2490, 2518.15, 2471.29, 2398.29, 2357.15, 2275.72, 2178.58, 2079, 1937.15, 1792.43, 1650.43, 1494.72, 1398.72, 1331.29, 1230.29, 1108.72, 1018.72, 936.72, 851.43, 754.29, 728, 628.43, 547.15, 501.72, 431, 396.58, 385, 366.86, 372, 344.43, 305, 305.15, 270.72, 235, 228.58, 213.58, 186.58, 172.43, 161.72, 153.15, 148.72, 142, 131.58, 119.58, 112, 97.58, 91, 86.15, 83.29, 80.43, 73, 63, 61, 56.43, 51.72, 51.29, 46.58, 45.58, 48.29, 48.43, 48.86, 49.86]
plt.plot(data, marker="o")
plt.show()

#誤差の二乗の和のリスト
squlist = []
#誤差の絶対値の和のリスト
abvlist = []
#誤差の最小値のリスト
emaxlist = []

#γの値
g = [1, 1/2, 1/3, 1/4, 1/5, 1/6, 1/7, 1/8, 1/9, 1/10, 1/11, 1/12, 1/13, 1/14, 1/15, 1/16, 1/17, 1/18, 1/19, 1/20, 1/21, 1/22, 1/23, 1/24, 1/25, 1/26, 1/27, 1/28, 1/29, 1/30, 1/31]

for gamma in g:
    def SIR_wrapper(beta, gamma):
        def SIR(t, y):
            dSdt = -beta * y[0] *y[1] - alpha * y[0]
            dIdt = beta * y[0] * y[1] - gamma * y[1]
            dRdt = gamma * y[1] + alpha * y[0]
            return [dSdt, dIdt, dRdt]
        return SIR
    #日数（2021年7月1日から2021年10月31日）
    T =123
    #感受性保持者初期値
    S_0 = 7813565
    #感染者初期値
    I_0 = 108
    #免疫保持者初期値
    R_0 = 1002992
    #基本再生産数
    R0 = 2.0
    #ワクチン接種率
    alpha = 0.0156
    beta = R0 * gamma / S_0

    result = solve_ivp(SIR_wrapper(beta, gamma), [0, T], [S_0, I_0, R_0], t_eval=np.arange(0, T))

    fig = plt.figure(figsize=(10, 5))
    plt.title(f"R0 = 2.0", fontsize=16)
    plt.xlabel("日数",fontsize=15)
    plt.ylabel("人数",fontsize=15)
    plt.plot(result.t,result.y[1], marker="o")
    plt.legend(['感染者'])
    plt.savefig("./SIR_sample_japan.png")
    plt.show()

    sim = result.y[1]
    plt.plot(data, marker = "o")
    plt.plot(sim, marker = "v")
    plt.show()
    
    #誤差の二乗の和
    e = []
    e = [a - b for (a, b) in zip(data, sim)]
    e1 = []
    e1 = [np.power(e,2)]
    squ = np.sum(e1)
    print(squ)

    #誤差の絶対値の和
    e2 = []
    e2 = [np.abs(e)]
    abv = np.sum(e2)
    print(abv) 
    
    #誤差の最大値
    emax = np.amax(e2)
    print(emax)
    
    squlist.append(squ)
    abvlist.append(abv)
    emaxlist.append(emax)

print(squlist)
print(abvlist)
print(emaxlist)
squmin = min(squlist)
abvmin = min(abvlist)
emaxmin = min(emaxlist)
print(squmin)
print(abvmin)
print(emaxmin)
